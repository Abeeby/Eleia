// Test de r√©servation de cours
const axios = require('axios');

async function testBooking() {
  try {
    console.log('üéØ Test de r√©servation de cours...\n');

    // 1. Connexion utilisateur test
    console.log('1Ô∏è‚É£ Connexion utilisateur test...');
    const loginResponse = await axios.post('http://localhost:5001/api/auth/login', {
      email: 'test@elaia-studio.ch',
      password: 'Test123!'
    });

    const token = loginResponse.data.token;
    const user = loginResponse.data.user;
    console.log('‚úÖ Connect√© en tant que:', user.email);
    console.log('üí≥ Cr√©dits disponibles:', user.credits);

    // 2. R√©cup√©rer le planning
    console.log('\n2Ô∏è‚É£ R√©cup√©ration du planning...');
    const scheduleResponse = await axios.get('http://localhost:5001/api/classes/schedule');
    const classes = scheduleResponse.data.classes;
    
    console.log('üìÖ Nombre de sessions disponibles:', classes.length);
    
    if (classes.length === 0) {
      console.log('‚ùå Aucune session disponible');
      return;
    }

    // 3. S√©lectionner le premier cours disponible
    const firstClass = classes[0];
    console.log('\n3Ô∏è‚É£ Cours s√©lectionn√©:');
    console.log('   - Type:', firstClass.class_types.name);
    console.log('   - Date:', new Date(firstClass.start_time).toLocaleString('fr-FR'));
    console.log('   - Cr√©dits requis:', firstClass.class_types.credits_required);
    console.log('   - Places:', firstClass.current_participants, '/', firstClass.max_participants);

    // 4. R√©server le cours
    console.log('\n4Ô∏è‚É£ Tentative de r√©servation...');
    try {
      const bookingResponse = await axios.post(
        'http://localhost:5001/api/bookings/book',
        { class_id: firstClass.id },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      console.log('‚úÖ R√©servation r√©ussie !');
      console.log('   - ID:', bookingResponse.data.booking.id);
      console.log('   - Message:', bookingResponse.data.message);
    } catch (bookingError) {
      if (bookingError.response?.status === 400) {
        console.log('‚ö†Ô∏è R√©servation impossible:', bookingError.response.data.message);
      } else {
        throw bookingError;
      }
    }

    // 5. V√©rifier mes r√©servations
    console.log('\n5Ô∏è‚É£ V√©rification de mes r√©servations...');
    const myBookingsResponse = await axios.get(
      'http://localhost:5001/api/bookings/my-bookings',
      { headers: { Authorization: `Bearer ${token}` } }
    );

    console.log('üìã Mes r√©servations:', myBookingsResponse.data.bookings.length);
    
    if (myBookingsResponse.data.bookings.length > 0) {
      const lastBooking = myBookingsResponse.data.bookings[0];
      console.log('   - Derni√®re r√©servation:', {
        cours: lastBooking.class_sessions?.class_types?.name,
        date: new Date(lastBooking.class_sessions?.start_time).toLocaleString('fr-FR'),
        statut: lastBooking.status,
        cr√©dits: lastBooking.credits_used
      });
    }

    console.log('\n‚ú® Test termin√© avec succ√®s !');

  } catch (error) {
    console.error('\n‚ùå Erreur:', error.response?.data || error.message);
  }
}

testBooking(); 